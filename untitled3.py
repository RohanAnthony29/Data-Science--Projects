# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vSefj3boyTCKWaUm0fdAQ040I5J8Vnna
"""

import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns

cc_data=pd.read_csv('Credit Score Classification Dataset.csv')

cc_data.head()

!pip install -q autoviz
!pip install -q -U --pre pycaret

cc_data.tail(5)

cc_data.nunique()

cc_data.dtypes

cc_data.info()

cc_data.describe()

cc_data.isna().any()

cc_data.isna().sum()

cc_data.columns

cat_col=cc_data.select_dtypes(include=['object']).columns.tolist()
cat_col

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()
for i in cat_col:
  
  le.fit(cc_data[i])

  cc_data[i]=le.transform(cc_data[i])

  cat_cols=cc_data.select_dtypes(include=['object']).columns.tolist()
  cat_cols

cc_data.corr()

plt.figure(figsize=(15,10))

sns.heatmap(cc_data.corr(),annot=True)

class_counts=cc_data['Credit Score'].value_counts()

class_counts

x=cc_data.drop('Credit Score', axis=1)
y=cc_data['Credit Score']

y

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from imblearn.over_sampling import SMOTE
sm=SMOTE(random_state=42)

X_train_res, Y_train_res = sm.fit_resample(X_train,Y_train)

print('Classification befor sampling:' , Y_train.value_counts())
print('Classification after sampling:' , Y_train_res.value_counts())

from autoviz.classify_method import data_cleaning_suggestions,data_suggestions
from pycaret import classification
from sklearn.model_selection import cross_val_score
from sklearn.metrics import classification_report, confusion_matrix

data_cleaning_suggestions(cc_data)

sns.pairplot(cc_data)

class_counts=cc_data['Credit Score'].value_counts()

  labels=["Low","Average","High"]

  value=class_counts.values

  plt.pie(value,labels=labels,autopct="%1.0f%%")

  plt.title("Diabetics Diagnotic  Distribution")

  plt.show()

import missingno as msno

msno.bar(cc_data)

def plots(cc_data,variable):
  if cc_data[variable].dtype != object:
    fig, ax= plt.subplots(1,5,figsize=(24,4))

    sns.histplot(cc_data[variable],bins=50,kde=True,ax=ax[0])
    ax[0].set_title('Histogram')
    
    sns.kdeplot(cc_data[variable],ax=ax[1])
    ax[2].set_title('Kde Plot')

    sns.lineplot(cc_data[variable],ax=ax[2])
    ax[2].set_title('Line plot')

    sns.boxplot(y=cc_data[variable],ax=ax[3])
    ax[3].set_title('Box plot')

    sns.scatterplot(x=cc_data.index, y=cc_data[variable],ax=ax[4])
    ax[4].set_title('Scatter plot')

    plt.tight_layout()
    plt.show()

for i in cc_data.columns:
  plots(cc_data,i)

import pandas as pd

train_data=pd.concat([X_train_res,Y_train_res],axis=1)

from pycaret.classification import *
s=setup(data=train_data,target='Credit Score',session_id=123,normalize=True)

compare_models()

knn=create_model('knn')

preds=predict_model(knn)

preds

from sklearn.model_selection import cross_val_score
scores=cross_val_score(knn,X_train_res,Y_train_res,cv=20)

preds=predict_model(knn)

plot_model(knn)

plot_model(knn,plot='error')

plot_model(knn,plot ='learning')

plot_model(knn,plot='vc')

from sklearn.neighbors import KNeighborsClassifier

clf = KNeighborsClassifier()
clf.fit(X_train_res,Y_train_res)
scores=cross_val_score(knn,X_train_res,Y_train_res,cv=20)

Y_preds=clf.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix
print("Classification_reports")
print(classification_report(Y_test,Y_preds))

print("Confusion_matrix")
print(confusion_matrix(Y_test,Y_preds))

